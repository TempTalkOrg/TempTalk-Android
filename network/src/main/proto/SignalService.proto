/**
 * Copyright (C) 2014-2016 Open Whisper Systems
 *
 * Licensed according to the LICENSE file in this repository.
 */
syntax = "proto2";

package signalservice;

option java_package = "org.whispersystems.signalservice.internal.push";
option java_outer_classname = "SignalServiceProtos";

message ConversationMsgInfo {
  optional ConversationPreview conversationPreview = 1;
  optional uint64              oldestMsgSId = 2; // 可拉取最老的消息 sequenceId，用于拉取消息
  optional uint64              oldestMsgNsId = 3; // 可拉取最老的消息 notifySequenceId，用于拉取消息
  optional uint64              lastestMsgSId = 4; // 可拉取最新的消息 sequenceId，用于拉取消息
}

message ConversationPreview {
  optional ConversationId  conversationId = 1;
  optional ReadPosition    readPosition = 2;
  optional uint32          unreadCorrection = 3;
  optional Envelope        lastestMsg = 4;
  repeated Envelope        onePageMsgs = 5;
  optional uint64          lastestMsgNsId = 6;
  optional uint64          maxOutgoingNsId = 7;
  optional uint64          maxOutgoingSId = 8; // 新增，用于消息拉取
}

message ConversationId{
  optional string  number = 1; // 1v1 会话，对方号码
  optional bytes   groupId = 2; // 群组，群组id,
}

message Envelope {
  enum Type {
    UNKNOWN = 0;
    CIPHERTEXT = 1;
    KEY_EXCHANGE = 2;
    PREKEY_BUNDLE = 3;
    RECEIPT = 5;
    NOTIFY = 6;
    PLAINTEXT = 7;
    ENCRYPTEDTEXT = 8;
  }

  enum  MsgType {
    MSG_UNKNOWN = 0;
    MSG_NORMAL = 1;
    MSG_SYNC = 2;
    MSG_READ_RECEIPT = 3;
    MSG_SYNC_READ_RECEIPT = 4;
    MSG_DELIVERY_RECEIPT = 5;
    MSG_NOTIFY = 6;
    MSG_RECALL = 7;
    MSG_RECALLED = 8;
    MSG_SYNC_PREVIEWABLE = 9;
    MSG_CLIENT_NOTIFY = 10;
    MSG_SCHEDULE_NORMAL = 11;
    MSG_ENC_CALL = 12;
  }

  optional Type   type = 1;
  optional string source = 2;
  optional uint32 sourceDevice = 7;
  optional string relay = 3;
  optional uint64 timestamp = 5;
  optional bytes  legacyMessage = 6;
  optional bytes  content = 8;
  optional bool   lastestMsgFlag = 9;
  optional uint64 sequenceId = 11; // msg seq number. Note: number 9 and 10 are reserved fields
  optional uint64 systemShowTimestamp = 12;
  optional MsgType msgType = 13;
  optional uint64 notifySequenceId = 14;
  optional string identityKey = 15;
  optional string peerContext = 16;
  optional MsgExtra msgExtra = 17;
  optional uint64 pushTimestamp = 19; //server推送消息时间戳：与systemShowTimestamp差值 表示消息在server停留时间
  optional string roomId = 20; // room id,calling消息中roomId为空时，使用该字段;// roomId和CallMessage中roomId都非空时，两者不相等时报错

}

message Content {
  optional DataMessage         dataMessage = 1;
  optional SyncMessage         syncMessage = 2;
  optional NullMessage         nullMessage = 4;
  optional ReceiptMessage      receiptMessage = 5;
  optional NotifyMessage       notifyMessage = 7;
  optional CallMessage         callMessage = 8;
}

message Card {
  enum Type {
    INSERT = 0;
    UPDATE = 1;
  }

  enum ContentType {
    MARKDOWN = 0;
    ADAPTIVECARD = 1;
  }

  optional string     appId = 1;
  optional string     cardId = 2;
  optional uint32     version = 3;
  optional string     creator = 4;
  optional uint64     timestamp = 5;
  optional string     content = 6;
  optional uint32     contentType = 7;
  optional uint32     type = 8;
  optional bool       fixedWidth = 9;
  optional uint32     height = 10;
  optional string     uniqueId = 11;
  optional string     source = 12;
  optional string     conversationId = 13;
}

message MsgExtra {
  optional Card  latestCard = 1;
  repeated ReactionInfo  ReactionInfos = 2;
  optional ConversationId   conversationId = 3;

  message ReactionInfo {
    repeated ReactionDetail  reactionDetail = 1;
    optional RealSource  source = 2;//原始消息源
  }

  message ReactionDetail {
    repeated RealSource source = 1;//emoji来源
    optional string   emoji = 2; //内容
    optional uint32   count = 3;//emoji个数
  }
}

message CallMessage {
  // calling : 发起Call & 邀请他人时发送
  message Calling {
    // roomId,可能为空；请求starting messages时，
    // client 还不知道room id，邀请人入会时才已知room id
    optional string roomId = 1;
    // instant Call时，conversationId为空；1on1 Call同步消息时，conversationId存callee号码；
    // 发给callee时，conversationId存caller号码
    optional ConversationId  conversationId = 2;
    optional string roomName = 3;
    optional string caller = 4; //  Call creator or 临时邀请人
    optional bytes emk = 5; // mk的密文，需要用自己私钥解密；
    optional bytes publicKey = 6; // 临时的ecc公钥
    optional bool createCallMsg = 7; // 是否创建Call消息
    optional string  controlType = 8; // call消息类型 start or invite
    repeated string  callees = 9; // 会议邀请时被邀参会人叫列表
    optional uint64  timestamp = 10; // 会议创建的时间戳
  }

  // caller&callee成功入会时，同步给自己另一端(如果有)
  // 如果只有一个端无需同步，用不上该消息
  // 多人 Call时，caller不用发送该消息，因为多人 Call时收到Calling消息后，就可以显示MeetingBar
  message Joined {
    optional string roomId = 1;
    // 1on1 Call, 主叫Joined将calling一起同步给自己另一端(如果有)；发起call时不要将calling投递给另一端；主叫Cancel时无需发Cancel给自己另外一端； 多人 Call 和 被叫 都无需携带 calling；
    // optional Calling calling = 2;
  }

  // cancel : caller取消 Call
  // 1on1 Call,同步给自己另一端(如果有)和对方；caller去及时清理数据，callee关闭弹窗
  // 多人 Call无需该消息，使用Server推送的 Call结束notify消息即可
  message Cancel {
    optional string roomId = 1;
  }

  // reject : callee拒绝加入 Call,
  // 1on1 Call,同步给自己另一端(如果有)和caller；callee去关闭弹窗；caller(仅发起一端)关闭弹窗，caller两端清理数据
  // 多人 Call,同步给自己另一端(如果有)
  message Reject {
    optional string roomId = 1;
  }

  // hangup : 1on1 Call,挂断已经接通的 Call,将消息发给对方, 无需将hangup消息同步给自己另一端
  // 原因： live sdk不能明确区分 remote participant是点击按钮主动leave call， 还是网络异常导致的participant disconnected
  // leave多人 Call, 无需发送该消息
  message Hangup {
    optional string roomId = 1;
  }

  optional Calling calling = 1;
  optional Joined joined = 2;
  optional Cancel cancel = 3;
  // 被多人同时call时，reject可能不止一个;
  optional Reject reject = 4;
  optional Hangup hangup = 5;
}


message RapidFile {
  optional string rapidHash = 1;
  optional string authorizedId = 2;
}

enum Mode {
  NORMAL = 0;
  CONFIDENTIAL = 1;
}

message DataMessage {
  enum Flags {
    END_SESSION = 1;
    EXPIRATION_TIMER_UPDATE = 2;
    PROFILE_KEY_UPDATE = 4;
  }

  message Quote {
    message QuotedAttachment {
      enum Flags {
        VOICE_MESSAGE = 1;
      }
      optional string            contentType = 1;
      optional string            fileName = 2;
      optional AttachmentPointer thumbnail = 3;
      optional uint32            flags = 4;
    }

    optional uint64           id = 1;
    optional string           author = 2;
    optional string           text = 3;
    repeated QuotedAttachment attachments = 4;
  }

  message Forward {
    enum Type {
      NORMAL = 0;
      EOF = 1;
    }
    optional uint64                    id = 1;
    optional uint32                    type = 2;
    optional bool                      isFromGroup = 3;
    optional string                    author = 4;
    optional string                    text = 5;
    repeated AttachmentPointer         attachments = 6;
    repeated Forward                   forwards = 7;
    optional Card                      card = 8;
    repeated Mention                   mentions = 9;
    optional uint64                    serverTimestamp = 10;
  }

  message ForwardContext {
    repeated Forward    forwards = 1;
    repeated RapidFile  rapidFiles = 2;
    optional bool       isFromGroup = 3;
  }

  message Contact {
    message Name {
      optional string givenName = 1;
      optional string familyName = 2;
      optional string prefix = 3;
      optional string suffix = 4;
      optional string middleName = 5;
      optional string displayName = 6;
    }

    message Phone {
      enum Type {
        HOME = 1;
        MOBILE = 2;
        WORK = 3;
        CUSTOM = 4;
      }

      optional string value = 1;
      optional Type   type = 2;
      optional string label = 3;
    }

    message Email {
      enum Type {
        HOME = 1;
        MOBILE = 2;
        WORK = 3;
        CUSTOM = 4;
      }

      optional string value = 1;
      optional Type   type = 2;
      optional string label = 3;
    }

    message PostalAddress {
      enum Type {
        HOME = 1;
        WORK = 2;
        CUSTOM = 3;
      }

      optional Type   type = 1;
      optional string label = 2;
      optional string street = 3;
      optional string pobox = 4;
      optional string neighborhood = 5;
      optional string city = 6;
      optional string region = 7;
      optional string postcode = 8;
      optional string country = 9;
    }

    message Avatar {
      optional AttachmentPointer avatar = 1;
      optional bool              isProfile = 2;
    }

    optional Name              name = 1;
    repeated Phone             number = 3;
    repeated Email             email = 4;
    repeated PostalAddress     address = 5;
    optional Avatar            avatar = 6;
    optional string            organization = 7;
  }

  message Recall {
    optional RealSource source = 1;
  }

  message ScreenShot {
    optional RealSource source = 1;
  }

  message Sticker {
    optional bytes             packId = 1;
    optional bytes             packKey = 2;
    optional uint32            stickerId = 3;
    optional AttachmentPointer data = 4;
    optional string            emoji = 5;
  }

  message Delete {
    optional uint64 targetSentTimestamp = 1;
  }

  message GroupCallUpdate {
    optional string eraId = 1;
  }

  message StoryContext {
    optional string authorUuid = 1;
    optional uint64 sentTimestamp = 2;
  }

  message Payment {

    message Address {
      message MobileCoin {
        optional bytes address = 1;
      }

      oneof Address {
        MobileCoin mobileCoin = 1;
      }
    }

    message Amount {
      message MobileCoin {
        optional uint64 picoMob = 1;
      }

      oneof Amount {
        MobileCoin mobileCoin = 1;
      }
    }

    message Notification {
      message MobileCoin {
        optional bytes receipt = 1;
      }

      oneof Transaction {
        MobileCoin mobileCoin = 1;
      }

      optional string note = 2;
    }

    oneof Item {
      Notification notification = 1;
    }
  }

  message GiftBadge {
    optional bytes receiptCredentialPresentation = 1;
  }

  message Reaction {
    optional RealSource source = 1;
    optional string     emoji = 2;
    optional bool       remove = 3;
    optional uint64     originTimestamp = 4;
  }

  message Mention {
    enum Type {
      INTERNAL = 0; //群成员
      EXTERNAL = 1; //非群成员
    }
    optional uint32 start = 1;
    optional uint32 length = 2;
    optional string uid = 3;
    optional Type   type = 4;
  }

  message BotContext{
    enum Type{
      SUPPORT = 1;
      ANNOUNCEMENT = 2;
    }
    optional Type   type = 1;
    optional RealSource source = 2;
    optional bytes groupId = 3;
    optional string header = 4;
  }

  message ThreadContext {
    optional RealSource source = 1;
    optional bool replyToUser = 2;
    optional bytes groupId = 3;
    optional string botId = 4;
  }

  enum ProtocolVersion {
    option allow_alias = true;

    INITIAL = 0;
    FORWARD = 1;
    CONTACT = 2;
    RECALL = 3;
    TASK = 4;
    VOTE = 5;
    REACTION = 6;
    CARD = 7;
    CONFIDE = 8;
    SCREEN_SHOT = 9;
    CURRENT = 9;
  }

  message Group {
    enum Type {
      UNKNOWN = 0;
      UPDATE = 1;
      DELIVER = 2;
      QUIT = 3;
      REQUEST_INFO = 4;
    }

    required bytes  id = 1;
    required Type   type = 2;
  }

  optional string             body = 1;
  repeated AttachmentPointer  attachments = 2;
  optional Group              group = 3;
  optional uint32             flags = 4;
  optional uint32             expireTimer = 5;
  optional bytes              profileKey = 6;
  optional uint64             timestamp = 7;
  optional Quote              quote = 8;
  optional string             atPersons = 10;
  optional Sticker            sticker = 110;//此处与11 ForwardContext有冲突
  optional ForwardContext     forwardContext = 11;
  optional uint32             requiredProtocolVersion = 12;
  repeated Contact            contact = 13;
  optional Recall             recall = 14;
  optional Delete             delete = 170;//此处与17 BotContext有冲突
  //  repeated BodyRange          bodyRanges              = 18;
  optional GroupCallUpdate    groupCallUpdate = 190;//此处与19
  optional Payment            payment = 200;//此处与20 Reaction有冲突
  optional StoryContext       storyContext = 210;//此处与21 Card有冲突
  optional BotContext         botContext = 17;
  optional ThreadContext      threadContext = 18;
  optional Reaction           reaction = 20;
  optional Card               card = 21;
  //  optional GiftBadge          giftBadge             = 22;
  repeated Mention            mentions = 22;
  optional Mode               messageMode = 23;
  optional ScreenShot         screenShot = 24;
}

message NullMessage {
  optional bytes padding = 1;
}

message ReceiptMessage {
  enum Type {
    DELIVERY = 0;
    READ = 1;
    VIEWED = 2;
  }

  optional Type   type = 1;
  repeated uint64 timestamp = 2;
  optional ReadPosition   readPosition = 3;
  optional Mode   messageMode = 4;
}

message RealSource {
  optional string source = 1;
  optional uint32 sourceDevice = 2;
  optional uint64 timestamp = 3;
  optional uint64 serverTimestamp = 4;
}

//客户端通知类型的消息
message NotifyMessage {
}

message ReadPosition {
  optional bytes  groupId = 1;
  optional uint64 readAt = 2;
  optional uint64 maxServerTime = 3;
  optional uint64 maxNotifySequenceId = 4;
  optional uint64 maxSequenceId = 5; // 新增
}

message Preview {
  optional string            url = 1;
  optional string            title = 2;
  optional AttachmentPointer image = 3;
  optional string            description = 4;
  optional uint64            date = 5;
}

message TextAttachment {
  enum Style {
    DEFAULT = 0;
    REGULAR = 1;
    BOLD = 2;
    SERIF = 3;
    SCRIPT = 4;
    CONDENSED = 5;
  }

  message Gradient {
    optional uint32 startColor = 1; // deprecated: this field will be removed in a future release.
    optional uint32 endColor = 2; // deprecated: this field will be removed in a future release.
    optional uint32 angle = 3; // degrees
    repeated uint32 colors = 4;
    repeated float  positions = 5; // percent from 0 to 1
  }

  optional string  text = 1;
  optional Style   textStyle = 2;
  optional uint32  textForegroundColor = 3; // integer representation of hex color
  optional uint32  textBackgroundColor = 4;
  optional Preview preview = 5;
  oneof background {
    Gradient gradient = 6;
    uint32   color = 7;
  }
}

message Verified {
  enum State {
    DEFAULT = 0;
    VERIFIED = 1;
    UNVERIFIED = 2;
  }

  reserved      /*destinationE164*/ 1;
  optional string destinationUuid = 5;
  optional bytes  identityKey = 2;
  optional State  state = 3;
  optional bytes  nullMessage = 4;
}

message SyncMessage {
  message Sent {
    optional string      destination = 1;
    optional uint64      timestamp = 2;
    optional DataMessage message = 3;
    optional uint64      expirationStartTimestamp = 4;
    repeated RapidFile   rapidFiles = 5;
    optional uint64      serverTimestamp = 6;
    optional uint64      sequenceId = 7;
    optional uint64      notifySequenceId = 8;
  }

  message Contacts {
    optional AttachmentPointer blob = 1;
    // Signal-iOS renamed this property.
    optional bool              isComplete = 2 [default = false];
  }

  message Groups {
    optional AttachmentPointer blob = 1;
  }

  message Blocked {
    repeated string numbers = 1;
  }

  message Request {
    enum Type {
      UNKNOWN = 0;
      CONTACTS = 1;
      GROUPS = 2;
      BLOCKED = 3;
      CONFIGURATION = 4;
    }

    optional Type type = 1;
  }

  message Read {
    optional string         sender = 1;
    optional uint64         timestamp = 2;
    optional ReadPosition   readPosition = 3;
    optional Mode           messageMode = 4;
  }

  message Configuration {
    optional bool readReceipts = 1;
  }

  message Task {
    enum Type {
      READ = 0;
    }
    optional string taskId = 1;
    optional uint32 version = 2;
    optional uint32 type = 3;
    optional uint64 timestamp = 4;
  }

  message MarkAsUnread {
    enum Flag {
      CLEAR = 0;
      UNREAD = 1;
      READ = 2;
    }

    optional ConversationId conversation = 1;
    optional Flag                   flag = 2; //0、清除设定的未读状态 1、 置未读 2、置全部已读
  }

  message ConversationArchive {
    enum Flag {
      UNARCHIVE = 0;      //解档
      ARCHIVE = 1;       //归档
    }

    optional ConversationId conversation = 1;
    optional Flag                 flag = 2; //0 解档 1、 归档
  }

  optional Sent          sent = 1;
  optional Request       request = 4;
  repeated Read          read = 5;
  optional Verified      verified = 7;
  optional Configuration configuration = 9;
  optional bytes         padding = 8;
  repeated Task          tasks = 10;
  optional MarkAsUnread  markAsUnread = 11;
  optional ConversationArchive  conversationArchive = 12;
  optional uint64        serverTimestamp = 16;

}

message AttachmentPointer {
  enum Flags {
    VOICE_MESSAGE = 1;
    BORDERLESS = 2;
    reserved        3;
    GIF = 4;
  }

  optional fixed64 id = 1;
  optional string  contentType = 2;
  optional bytes   key = 3;
  optional uint32  size = 4;
  optional bytes   thumbnail = 5;
  optional bytes   digest = 6;
  optional string  fileName = 7;
  optional uint32  flags = 8;
  optional uint32  width = 9;
  optional uint32  height = 10;
  optional string  caption = 11;
  optional string  blurHash = 12;
  optional uint64  uploadTimestamp = 13;
  optional uint32  cdnNumber = 14;
  // Next ID: 16
}
